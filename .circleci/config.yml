version: 2.1
executors:
  node8:
    docker:
    - image: circleci/node:8
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

commands:
  setup:
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: install npm 6.4.1
        command: sudo npm -g install npm@6.4.1
    - run:
        name: Installing Dependencies
        command: npm install
    - save_cache:
        paths:
        - node_modules
        key: v1-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: prepare test git user
        command: git config --global user.email "circleci@example.com" && git config --global user.name "CircleCi Build"

orbs:
    helix_smoke_tests:
        executors:
            node8:
                docker:
                    - image: circleci/node:8
        jobs:
            run_tests:
                executor: node8

                description: "Run smoke tests on a remote repository, wait for execution and report status"
                parameters:
                    token:
                        type: string
                    remote_repo:
                        type: string
                steps:
                    - run_tests_cmd:
                        token: << parameters.token >>
                        remote_repo: << parameters.remote_repo >>
        commands:
            run_tests_cmd:
                description: "Run smoke tests on a remote repository, wait for execution and report status"
                parameters:
                    token:
                        type: string
                    local_repo:
                        type: string
                        default: ${CIRCLE_PROJECT_REPONAME}
                    local_branch:
                        type: string
                        default: ${CIRCLE_BRANCH}
                    remote_repo:
                        type: string
                    remote_branch:
                        type: string
                        default: master
                steps:
                    - run:
                        name: Call remote smoke tests job
                        command: |
                            curl \
                                --user << parameters.token>>: \
                                --header "Content-Type: application/json" \
                                --silent \
                                --data "{\"build_parameters\": {\"GDM_MODULE_BRANCHES\": { \"<< parameters.local_repo >>\": \"<< parameters.local_branch >>\"}}}" \
                                --request POST "https://circleci.com/api/v1.1/project/github/<< parameters.remote_repo >>/tree/<< parameters.remote_branch >>" > run_tests_cmd_job.json
                    - run:
                        name: Wait for smoke tests job to complete and report status
                        command: |
                            smoke_job_build_num=$(jq '.build_num' < run_tests_cmd_job.json)

                            build_url="https://circleci.com/api/v1.1/project/github/<< parameters.remote_repo >>/${smoke_job_build_num}"

                            smoke_result_file="smoke_result.json"
                            smoke_step_name="Running Smoke Tests"

                            echo "Waiting now for smoke tests job execution. See build ${build_url}."

                            RUNNING=true
                                while [ $RUNNING == true ]; do
                                sleep 10;
                                status=$(curl --silent --header "Accept: application/json" "${build_url}?circle-token=$1" | tee ${smoke_result_file} | jq -r '.status');
                                echo 'running queued scheduled not_running' | grep --silent "$status" || RUNNING=false;
                                echo -n "."
                            done

                            echo ""
                            echo "Smoke tests ${build_url} finished with status ${status}"

                            if [[ $status == 'fixed success' ]]
                            then
                                exit_code=0
                            else
                                exit_code=1

                                # get the output_url property from the "Running Smoke Tests" job in the json response
                                output_url=$(jq -r ".steps[] | select(.name == \"${smoke_step_name}\") | .actions[0].output_url" ${smoke_result_file});

                                echo ""
                                echo "Smoke tests error message:"
                                echo ""

                                if [ ! -z "${output_url}" ]
                                then
                                    # call the output url to fetch the error message and display it
                                    error_message=$(curl --silent --compressed --header "Accept: application/json" "${output_url}" | jq -r '.[0].message');
                                    echo -n "${error_message}" | tr -d '\r'
                                else
                                    # no output_url, unknown error
                                    echo "Unknown error. Check the smoke test job execution logs for more details."
                                fi
                                echo ""
                            fi
                            exit $exit_code
            

jobs:
  build:
    executor: node8

    steps:
    - setup
        # run tests!
    - run: mkdir junit
    - run:
        name: prepare test git user
        command: git config --global user.email "you@example.com" && git config --global user.name "Your Name"
    - run:
        name: Lint
        command: npm run lint

    # test & get code coverage
    - run:
        name: Getting Code Coverage
        command: circleci tests glob test/test*.js | circleci tests split --split-by=timings | xargs ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha -- -R mocha-junit-reporter --exit && npx codecov
        environment:
          MOCHA_FILE: junit/test-results.xml

    - store_test_results:
        path: junit

    - store_artifacts:
        path: junit

  publish-pre-release:
    executor: node8

    steps:
    - setup
    - run:
        name: revert changes to package-lock.json
        command: git checkout -- package-lock.json

    - run:
        name: configure npm registry
        command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

    - run:
        name: version pre-release
        command: npm version prerelease --preid=pre -m "Release %s [ci skip]"
        environment:
          MOCHA_FILE: junit/test-results.xml

    - store_test_results:
        path: junit

    # unfortunately we cannot create a release commit with no tag with `npm version`, so we need to delete it here again
    - run:
        name: delete pre-release tag
        command: npm run delete-git-tag

    - run:
        name: publish pre-release
        command: npm publish --tag next --access public

workflows:
  version: 2
  build:
    jobs:
    # publish pre-releases on master
    - publish-pre-release:
        requires:
        - build
        filters:
          branches:
            only: master
    - build
  smoke:
    jobs:
        - helix_smoke_tests/run_tests:
            token: ${SMOKE_TEST_TOKEN}
            remote_repo: adobe/helix-continuous
